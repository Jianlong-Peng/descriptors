cmake_minimum_required(VERSION 2.6)

PROJECT(descriptors)

option(BUILD_SHARED "enable shared build" OFF)
if(BUILD_SHARED)
    SET(BUILD_TYPE SHARED)
    add_definitions(-DUSING_DYNAMIC_LIBS)
else()
    SET(BUILD_TYPE STATIC)
endif()

if(BABEL_INCLUDE_DIR)
    INCLUDE_DIRECTORIES(${BABEL_INCLUDE_DIR})
else()
    MESSAGE(FATAL_ERROR "-DBABEL_INCLUDE_DIR is needed!")
endif(BABEL_INCLUDE_DIR)

if(BABEL_LIB_DIR)
    LINK_DIRECTORIES(${BABEL_LIB_DIR})
endif()


if(MSVC)
	SET(OPENBABEL_LIB openbabel-2)
    SET(CMAKE_CXX_FLAGS_DEBUG "/W3 /MDd")
    #SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/INCREMENTAL:NO /SUBSYSTEM:CONSOLE")
    SET(CMAKE_CXX_FLAGS_RELEASE "/W3 /O2 /MD /D NDEBUG")
    SET(CMAKE_EXE_LINKER_FLAGS "/INCREMENTAL:NO /SUBSYSTEM:CONSOLE")
endif()
if(CMAKE_COMPILER_IS_GNUCXX)
	SET(OPENBABEL_LIB openbabel)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -DDEBUG")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O2 -DNDEBUG")
endif()

SET(BIN_INSTALL_DIR bin)
if(MSVC)
    SET(LIB_INSTALL_DIR ${BIN_INSTALL_DIR})
else()
    SET(LIB_INSTALL_DIR lib)
endif()

ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(tools)

INSTALL(FILES README DESTINATION bin)
